#
# Build Stage
#
FROM --platform=linux/amd64 nvidia/cuda:12.5.0-devel-ubuntu22.04 AS build

# Install dependencies
RUN apt-get update -y && \
  apt-get install -y --no-install-recommends \
  # For Rust builds, OpenSSL, pkg-config
  openssl \
  libssl-dev \
  pkg-config \
  # General build tools for native dependencies
  build-essential \
  libclang-dev \
  diffutils \
  gcc \
  m4 \
  make \
  # Utilities
  wget \
  tar \
  unzip \
  git \
  curl \
  openssh-client \
  && apt-get clean && \
  rm -rf /var/lib/apt/lists/*

# Install Rust
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"
COPY rust-toolchain.toml rust-toolchain.toml
RUN rustup show
ENV RUSTFLAGS='-C debuginfo=2' RUST_BACKTRACE=full

# Install golang
ENV GO_VERSION=1.22.1
RUN wget -q https://golang.org/dl/go$GO_VERSION.linux-amd64.tar.gz && \
  tar -C /usr/local -xzf go$GO_VERSION.linux-amd64.tar.gz && \
  rm go$GO_VERSION.linux-amd64.tar.gz
ENV PATH=$PATH:/usr/local/go/bin

# Install sp1 toolchain
ENV CARGO_NET_GIT_FETCH_WITH_CLI=true
RUN curl -L https://sp1.succinct.xyz | bash && ~/.sp1/bin/sp1up

# Install protoc
ENV PROTOC_ZIP=protoc-29.4-linux-x86_64.zip
RUN curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v29.4/$PROTOC_ZIP && \
  unzip -o $PROTOC_ZIP -d /usr/local bin/protoc && \
  unzip -o $PROTOC_ZIP -d /usr/local 'include/*' && \
  rm -f $PROTOC_ZIP

# Default to SSH, but use HTTPS if GITHUB_TOKEN is present. Note this leaves the token in the image
# history, so the images should not be pushed to a public registry.
ARG GITHUB_TOKEN
ENV GITHUB_TOKEN=${GITHUB_TOKEN}
RUN if [ -n "$GITHUB_TOKEN" ] ; then \
  git config --global --replace-all url."https://${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"; \
  git config --global --add url."https://${GITHUB_TOKEN}@github.com/".insteadOf "git@github.com:"; \
  echo "Using HTTPS + GITHUB_TOKEN for git" >&2; \
  else \
  git config --global url."git@github.com:".insteadOf https://github.com/; \
  echo "Using SSH for git" >&2; \
  fi; mkdir -p -m 0700 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts

# Application source code
WORKDIR /app
COPY . .

# Environment variables for the build
ARG BUILD_PROFILE=release
ENV BUILD_PROFILE=$BUILD_PROFILE

ARG RUSTFLAGS=""
ENV RUSTFLAGS="$RUSTFLAGS"

ARG FEATURES="gpu"
ENV FEATURES=$FEATURES

ARG VERGEN_GIT_SHA
ENV VERGEN_GIT_SHA=$VERGEN_GIT_SHA

RUN --mount=type=ssh \
  --mount=type=cache,target=/root/.cargo/git \    
  --mount=type=cache,target=/root/.cargo/registry \
  --mount=type=cache,target=/app/target \
  echo "Building with profile: $BUILD_PROFILE | features: $FEATURES | rustflags: $RUSTFLAGS" && \
  cargo build --profile=$BUILD_PROFILE --features=$FEATURES --bin sp1-cluster-node && \
  cp target/$BUILD_PROFILE/sp1-cluster-node /sp1-cluster-node

# Runtime stage
FROM --platform=linux/amd64 nvidia/cuda:12.5.0-runtime-ubuntu22.04 AS runtime

RUN \
  apt-get update -y && \
  apt-get install -y --no-install-recommends \
  ca-certificates \
  wget && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Create a non-root user and group for better security
RUN groupadd --gid 1001 appgroup && \
  useradd --uid 1001 --gid appgroup --shell /bin/false --create-home appuser

# Copy the built application binaries from the build stage
COPY --from=build /sp1-cluster-node /app/sp1-cluster-node

# Set ownership to the non-root user and ensure the binary is executable
RUN chown appuser:appgroup /app/sp1-cluster-node && \
  chmod +x /app/sp1-cluster-node

# Set the user to the non-root user
USER appuser

CMD ["/app/sp1-cluster-node"]
