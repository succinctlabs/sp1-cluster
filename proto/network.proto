// The RPC for interacting with the Succinct Prover Network.
syntax = "proto3";

package network;
option go_package = "network/;network";

// The available functions to call on the Succinct Prover Network RPC.
service NetworkService {
  // Create a proof, the first step in requesting a proof.
  rpc CreateProof(CreateProofRequest) returns (CreateProofResponse) {}
  // Submit a proof, the second step in requesting a proof. MUST be called when the proof is in a PROOF_PREPARING state.
  rpc SubmitProof(SubmitProofRequest) returns (SubmitProofResponse) {}
  // Claim a requested proof, committing to prove it and later fulfilling it. MUST be called when the proof is in a PROOF_REQUESTED state.
  rpc ClaimProof(ClaimProofRequest) returns (ClaimProofResponse) {}
  // Unclaim proof that was previously claimed. MUST be called when the proof is in a PROOF_CLAIMED state and MUST be called by the prover who claimed it.
  rpc UnclaimProof(UnclaimProofRequest) returns (UnclaimProofResponse) {}
  // Update the number of CPU cycles used in the proof. MUST be called when the proof is in a PROOF_CLAIMED state and MUST be called by the prover who claimed it.
  rpc ModifyCpuCycles(ModifyCpuCyclesRequest) returns (ModifyCpuCyclesResponse) {}
  // Fulfill the proof that was previously claimed. MUST be called when the proof is in a PROOF_CLAIMED state and MUST be called by the prover who claimed it.
  rpc FulfillProof(FulfillProofRequest) returns (FulfillProofResponse) {}
  // Relay the proof that was previously fulfilled. MUST be called when the proof is in a PROOF_FULFILLED state.
  rpc RelayProof(RelayProofRequest) returns (RelayProofResponse) {}

  // Get the nonce for a given account. Used to check current nonce, which must match when signing and sending a message.
  rpc GetNonce(GetNonceRequest) returns (GetNonceResponse) {}
  // Get the proof status for a given proof ID.
  rpc GetProofStatus(GetProofStatusRequest) returns (GetProofStatusResponse) {}
  // Get the proof requests for a given status.
  rpc GetProofRequests(GetProofRequestsRequest) returns (GetProofRequestsResponse) {}
  // Get the relay status for a given transaction ID.
  rpc GetRelayStatus(GetRelayStatusRequest) returns (GetRelayStatusResponse) {}
}

// The mode used when generating the proof.
enum ProofMode {
  // Unspecified or invalid proof mode.
  PROOF_MODE_UNSPECIFIED = 0;
  // The proof mode for an SP1 core proof.
  PROOF_MODE_CORE = 1;
  // The proof mode for a compressed proof.
  PROOF_MODE_COMPRESSED = 2;
  // The proof mode for a PlonK proof.
  PROOF_MODE_PLONK = 3;
  // The proof mode for a Groth16 proof.
  PROOF_MODE_GROTH16 = 4;
}

// The status of a proof request.
enum ProofStatus {
  // Unspecified or invalid status.
  PROOF_UNSPECIFIED_STATUS = 0;
  // The proof request has been created but is awaiting the requester to submit it.
  PROOF_PREPARING = 1;
  // The proof request has been submitted and is awaiting a prover to claim it.
  PROOF_REQUESTED = 2;
  // The proof request has been claimed and is awaiting a prover to fulfill it.
  PROOF_CLAIMED = 3;
  // The proof request was previously claimed but has now been unclaimed.
  PROOF_UNCLAIMED = 4;
  // The proof request has been fulfilled and is available for download.
  PROOF_FULFILLED = 5;
}

// The status of a relay request transaction.
enum TransactionStatus {
  // Unspecified or invalid status.
  TRANSACTION_UNSPECIFIED_STATUS = 0;
  // The transaction has been scheduled for relay.
  TRANSACTION_SCHEDULED = 1;
  // The transaction has been broadcast to the requested chain.
  TRANSACTION_BROADCASTED = 2;
  // The transaction was never confirmed as mined.
  TRANSACTION_TIMEDOUT = 3;
  // The transaction failed to be broadcast, likely due to a revert in simulation.
  TRANSACTION_FAILED = 4;
  // The transaction was mined successfully.
  TRANSACTION_FINALIZED = 5;
}

// The request to create a proof, the first step in requesting a proof.
message CreateProofRequest {
  // The signature of the message.
  bytes signature = 1;
  // The nonce for the account.
  uint64 nonce = 2;
  // The mode for proof generation.
  ProofMode mode = 3;
  // The deadline for the proof request, signifying the latest time a fulfillment would be valid.
  uint64 deadline = 4;
  // The SP1 circuit version to use for the proof.
  string circuit_version = 5;
}

// The response for creating a proof.
message CreateProofResponse {
  // The proof identifier.
  string proof_id = 1;
  // The URL to upload the ELF file.
  string program_url = 2;
  // The URL to upload the standard input (stdin).
  string stdin_url = 3;
}

// The request to submit a proof, the second step in requesting a proof. MUST be called when the
// proof is in a PROOF_REQUESTED state and MUST be called after uploading the program and stdin to
// the URLs provided during create proof.
message SubmitProofRequest {
  // The signature of the message.
  bytes signature = 1;
  // The nonce for the account.
  uint64 nonce = 2;
  // The proof identifier.
  string proof_id = 3;
}

// The response for submitting a proof, empty on success.
message SubmitProofResponse {
}

// The request to claim a proof, which agrees to fulfill the proof by the deadline. MUST be called
// when the proof is in a PROOF_REQUESTED state.
message ClaimProofRequest {
  // The signature of the message.
  bytes signature = 1;
  // The nonce for the account.
  uint64 nonce = 2;
  // The proof identifier.
  string proof_id = 3;
}

// The response for claiming a proof, giving identifiers for the locations to retrieve the program
// and stdin, as well as the location to upload the proof.
message ClaimProofResponse {
  // The artifact identifier for the program location.
  string program_artifact_id = 1;
  // The artifact identifier for the stdin location.
  string stdin_artifact_id = 2;
  // The artifact identifier for the proof location.
  string proof_artifact_id = 3;
}

enum UnclaimReason {
  // Unspecified reason.
  UNCLAIM_REASON_UNSPECIFIED = 0;
  // The prover claims the request is invalid and cannot be fulfilled.
  UNCLAIM_REASON_INVALID = 1;
  // The prover is unable to fulfill the proof due to any other reason.
  UNCLAIM_REASON_ABANDONED = 2;
}

// The request to unclaim a proof, which cancels the claim to fulfill the proof. MUST be called
// when the proof is in a PROOF_CLAIMED state and MUST be called by the prover who claimed it.
message UnclaimProofRequest {
  // The signature of the message.
  bytes signature = 1;
  // The nonce for the account.
  uint64 nonce = 2;
  // The proof identifier.
  string proof_id = 3;
  // The reason for unclaiming the proof.
  UnclaimReason reason = 4;
  // The description for the reason.
  string description = 5;
}

// The response for unclaiming a proof, empty on success.
message UnclaimProofResponse {}

// The request to update a proof's CPU cycle count.
message ModifyCpuCyclesRequest {
  // The signature of the message.
  bytes signature = 1;
  // The nonce for the account.
  uint64 nonce = 2;
  // The proof identifier.
  string proof_id = 3;
  // The number of CPU cycles for this proof.
  uint64 cycles = 4;
}

// The response for updating a proof's CPU cycle count, empty on success.
message ModifyCpuCyclesResponse {}

// The request to fulfill a proof. MUST be called after the proof has been uploaded and MUST be called
// when the proof is in a PROOF_CLAIMED state.
message FulfillProofRequest {
  // The signature of the message.
  bytes signature = 1;
  // The nonce for the account.
  uint64 nonce = 2;
  // The proof identifier.
  string proof_id = 3;
}

// The response for fulfilling a proof, empty on success.
message FulfillProofResponse {
  // The amount of time, in seconds, between proof claim and fulfillment.
  uint64 proving_seconds = 1;
}

// The request to relay a proof through the NetworkGateway on a given chain. MUST be called when the
// proof is in a PROOF_FULFILLED state.
message RelayProofRequest {
  // The signature of the message.
  bytes signature = 1;
  // The nonce for the account.
  uint64 nonce = 2;
  // The proof identifier.
  string proof_id = 3;
  // The chain ID for the requested chain.
  uint32 chain_id = 4;
  // The address of the verifier for this proof.
  bytes verifier = 5;
  // The address of the callback to call after the proof has been verified by the verifier.
  bytes callback = 6;
  // The data to send to the callback, including the function selector.
  bytes callback_data = 7;
}

// The response for relaying a proof.
message RelayProofResponse {
  // The transaction identifier.
  string tx_id = 1;
}

// The request for an account nonce. Used to check current nonce for the account, which must match when signing and sending a message.
message GetNonceRequest {
  // The account's address for which to get the nonce.
  bytes address = 1;
}

// The response for a nonce request.
message GetNonceResponse {
  // The nonce for the given address. It should be signed along with the rest of the message.
  uint64 nonce = 1;
}

// The request to get a proof status by a given proof ID.
message GetProofStatusRequest {
  // The proof identifier.
  string proof_id = 1;
}

// The response for a proof status request.
message GetProofStatusResponse {
  // The status of the proof request.
  ProofStatus status = 1;
  // Optional proof URL, where you can download the result of the proof request. Only included if
  // the proof has been fulfilled.
  optional string proof_url = 2;
  // If the proof was unclaimed, the reason why.
  optional UnclaimReason unclaim_reason = 3;
  // If the proof was unclaimed, the description detailing why.
  optional string unclaim_description = 4;
}

// The request to get proof requests by a given status.
message GetProofRequestsRequest {
  // The status of the proof requests to filter for.
  ProofStatus status = 1;
  // The SP1 circuit version of the proof requests to filter for.
  optional string circuit_version = 2;
}

// A proof request.
message RequestedProof {
  // The proof identifier.
  string proof_id = 1;
  // The mode for proof generation.
  ProofMode mode = 2;
  // Proof requester's address.
  bytes requester = 3;
  // The SP1 circuit version to use for the proof.
  string circuit_version = 4;
} 

// The response for getting proof requests by a given status.
message GetProofRequestsResponse {
  // The proof identifiers of the proof requests. Limited to the 10 most recent proof requests with
  // that status.
  repeated RequestedProof proofs = 1;
}

// The request to get the status of a relay request.
message GetRelayStatusRequest {
  // The transaction identifier.
  string tx_id = 1;
}

// The response for getting the status of a relay request.
message GetRelayStatusResponse {
  // The status of the transaction.
  TransactionStatus status = 1;
  // The transaction hash.
  bytes tx_hash = 2;
  // The transactionsimulation URL, only present if the transaction failed.
  string simulation_url = 3;
}